
AutnomusSelfParkingCar.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000085a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000008ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800060  00800060  000008ce  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008ce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000900  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002a0  00000000  00000000  0000093c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001fca  00000000  00000000  00000bdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bb6  00000000  00000000  00002ba6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000169d  00000000  00000000  0000375c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004f8  00000000  00000000  00004dfc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ef7  00000000  00000000  000052f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000012b6  00000000  00000000  000061eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000230  00000000  00000000  000074a1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 41 00 	jmp	0x82	; 0x82 <__ctors_end>
   4:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
   8:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
   c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  10:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  14:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  18:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  1c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  20:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  24:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  28:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  2c:	0c 94 58 01 	jmp	0x2b0	; 0x2b0 <__vector_11>
  30:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  34:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  38:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  3c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  40:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  44:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  48:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  4c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  50:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  54:	7b 02       	muls	r23, r27
  56:	88 02       	muls	r24, r24
  58:	95 02       	muls	r25, r21
  5a:	a2 02       	muls	r26, r18
  5c:	af 02       	muls	r26, r31
  5e:	17 03       	mulsu	r17, r23
  60:	bc 02       	muls	r27, r28
  62:	c9 02       	muls	r28, r25
  64:	d6 02       	muls	r29, r22
  66:	31 03       	mulsu	r19, r17
  68:	24 03       	mulsu	r18, r20
  6a:	e3 02       	muls	r30, r19
  6c:	f0 02       	muls	r31, r16
  6e:	fd 02       	muls	r31, r29
  70:	0a 03       	fmul	r16, r18
  72:	48 03       	fmul	r20, r16
  74:	52 03       	mulsu	r21, r18
  76:	5c 03       	fmul	r21, r20
  78:	66 03       	mulsu	r22, r22
  7a:	70 03       	mulsu	r23, r16
  7c:	7a 03       	fmul	r23, r18
  7e:	84 03       	fmuls	r16, r20
  80:	8e 03       	fmulsu	r16, r22

00000082 <__ctors_end>:
  82:	11 24       	eor	r1, r1
  84:	1f be       	out	0x3f, r1	; 63
  86:	cf e5       	ldi	r28, 0x5F	; 95
  88:	d8 e0       	ldi	r29, 0x08	; 8
  8a:	de bf       	out	0x3e, r29	; 62
  8c:	cd bf       	out	0x3d, r28	; 61

0000008e <__do_copy_data>:
  8e:	10 e0       	ldi	r17, 0x00	; 0
  90:	a0 e6       	ldi	r26, 0x60	; 96
  92:	b0 e0       	ldi	r27, 0x00	; 0
  94:	ea e5       	ldi	r30, 0x5A	; 90
  96:	f8 e0       	ldi	r31, 0x08	; 8
  98:	02 c0       	rjmp	.+4      	; 0x9e <__do_copy_data+0x10>
  9a:	05 90       	lpm	r0, Z+
  9c:	0d 92       	st	X+, r0
  9e:	a0 36       	cpi	r26, 0x60	; 96
  a0:	b1 07       	cpc	r27, r17
  a2:	d9 f7       	brne	.-10     	; 0x9a <__do_copy_data+0xc>

000000a4 <__do_clear_bss>:
  a4:	20 e0       	ldi	r18, 0x00	; 0
  a6:	a0 e6       	ldi	r26, 0x60	; 96
  a8:	b0 e0       	ldi	r27, 0x00	; 0
  aa:	01 c0       	rjmp	.+2      	; 0xae <.do_clear_bss_start>

000000ac <.do_clear_bss_loop>:
  ac:	1d 92       	st	X+, r1

000000ae <.do_clear_bss_start>:
  ae:	a8 36       	cpi	r26, 0x68	; 104
  b0:	b2 07       	cpc	r27, r18
  b2:	e1 f7       	brne	.-8      	; 0xac <.do_clear_bss_loop>
  b4:	0e 94 60 00 	call	0xc0	; 0xc0 <main>
  b8:	0c 94 2b 04 	jmp	0x856	; 0x856 <_exit>

000000bc <__bad_interrupt>:
  bc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c0 <main>:
#include "UnParking.h"

int main(void)
{
	//sei();
    DC_MOTOR_Initilization();
  c0:	0e 94 fe 00 	call	0x1fc	; 0x1fc <DC_MOTOR_Initilization>
	//ALCOHOL_Initilization();
	//LED_Initilization();
	//IR_Initilization();
	//DOOR_Initilization();
	//LCD_Initialization();
	SERVO_MOTOR_Initilization();
  c4:	0e 94 41 01 	call	0x282	; 0x282 <SERVO_MOTOR_Initilization>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c8:	2f ef       	ldi	r18, 0xFF	; 255
  ca:	81 e1       	ldi	r24, 0x11	; 17
  cc:	9a e7       	ldi	r25, 0x7A	; 122
  ce:	21 50       	subi	r18, 0x01	; 1
  d0:	80 40       	sbci	r24, 0x00	; 0
  d2:	90 40       	sbci	r25, 0x00	; 0
  d4:	e1 f7       	brne	.-8      	; 0xce <main+0xe>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <main+0x18>
  d8:	00 00       	nop
	//ULTRASONIC_Initilization();
	//LCD_WriteString("Distance is");
	_delay_ms(5000);
	//AutoPark();
	UnParking();
  da:	0e 94 70 00 	call	0xe0	; 0xe0 <UnParking>
  de:	ff cf       	rjmp	.-2      	; 0xde <main+0x1e>

000000e0 <UnParking>:
	//LCD_Clear();
	//LCD_WriteString("Un Parking...");
	
	
	//Motor backward
	SERVO_MOTOR_Vertical();
  e0:	0e 94 4c 01 	call	0x298	; 0x298 <SERVO_MOTOR_Vertical>
	DC_MOTOR_RunAntiClkWise();
  e4:	0e 94 14 01 	call	0x228	; 0x228 <DC_MOTOR_RunAntiClkWise>
  e8:	2f e7       	ldi	r18, 0x7F	; 127
  ea:	8d e7       	ldi	r24, 0x7D	; 125
  ec:	94 e3       	ldi	r25, 0x34	; 52
  ee:	21 50       	subi	r18, 0x01	; 1
  f0:	80 40       	sbci	r24, 0x00	; 0
  f2:	90 40       	sbci	r25, 0x00	; 0
  f4:	e1 f7       	brne	.-8      	; 0xee <UnParking+0xe>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <UnParking+0x18>
  f8:	00 00       	nop
	
	//loop for try and error
	_delay_ms(2150);
	
	//motor stops
 	DC_MOTOR_Stop();
  fa:	0e 94 1f 01 	call	0x23e	; 0x23e <DC_MOTOR_Stop>
  fe:	2f ef       	ldi	r18, 0xFF	; 255
 100:	89 e6       	ldi	r24, 0x69	; 105
 102:	98 e1       	ldi	r25, 0x18	; 24
 104:	21 50       	subi	r18, 0x01	; 1
 106:	80 40       	sbci	r24, 0x00	; 0
 108:	90 40       	sbci	r25, 0x00	; 0
 10a:	e1 f7       	brne	.-8      	; 0x104 <UnParking+0x24>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <UnParking+0x2e>
 10e:	00 00       	nop
	_delay_ms(1000);
	
	//servo left
	SERVO_MOTOR_TurnLeft();
 110:	0e 94 54 01 	call	0x2a8	; 0x2a8 <SERVO_MOTOR_TurnLeft>
	
	
	//motor forward
	DC_MOTOR_RunClkWise();
 114:	0e 94 09 01 	call	0x212	; 0x212 <DC_MOTOR_RunClkWise>
 118:	2f ef       	ldi	r18, 0xFF	; 255
 11a:	85 ec       	ldi	r24, 0xC5	; 197
 11c:	9c e5       	ldi	r25, 0x5C	; 92
 11e:	21 50       	subi	r18, 0x01	; 1
 120:	80 40       	sbci	r24, 0x00	; 0
 122:	90 40       	sbci	r25, 0x00	; 0
 124:	e1 f7       	brne	.-8      	; 0x11e <UnParking+0x3e>
 126:	00 c0       	rjmp	.+0      	; 0x128 <UnParking+0x48>
 128:	00 00       	nop
	
	
	//loop for try and error
	_delay_ms(3800);
	DC_MOTOR_Stop();
 12a:	0e 94 1f 01 	call	0x23e	; 0x23e <DC_MOTOR_Stop>
	SERVO_MOTOR_Vertical();
 12e:	0e 94 4c 01 	call	0x298	; 0x298 <SERVO_MOTOR_Vertical>
 132:	2f ef       	ldi	r18, 0xFF	; 255
 134:	89 e6       	ldi	r24, 0x69	; 105
 136:	98 e1       	ldi	r25, 0x18	; 24
 138:	21 50       	subi	r18, 0x01	; 1
 13a:	80 40       	sbci	r24, 0x00	; 0
 13c:	90 40       	sbci	r25, 0x00	; 0
 13e:	e1 f7       	brne	.-8      	; 0x138 <UnParking+0x58>
 140:	00 c0       	rjmp	.+0      	; 0x142 <UnParking+0x62>
 142:	00 00       	nop
	_delay_ms(1000);
	
	
	//servo right
	SERVO_MOTOR_TurnRight();
 144:	0e 94 50 01 	call	0x2a0	; 0x2a0 <SERVO_MOTOR_TurnRight>
	DC_MOTOR_RunAntiClkWise();
 148:	0e 94 14 01 	call	0x228	; 0x228 <DC_MOTOR_RunAntiClkWise>
 14c:	2f e7       	ldi	r18, 0x7F	; 127
 14e:	89 ec       	ldi	r24, 0xC9	; 201
 150:	91 e5       	ldi	r25, 0x51	; 81
 152:	21 50       	subi	r18, 0x01	; 1
 154:	80 40       	sbci	r24, 0x00	; 0
 156:	90 40       	sbci	r25, 0x00	; 0
 158:	e1 f7       	brne	.-8      	; 0x152 <UnParking+0x72>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <UnParking+0x7c>
 15c:	00 00       	nop
	
	//loop for try and error
	_delay_ms(3350);
	DC_MOTOR_Stop();
 15e:	0e 94 1f 01 	call	0x23e	; 0x23e <DC_MOTOR_Stop>
	SERVO_MOTOR_Vertical();
 162:	0e 94 4c 01 	call	0x298	; 0x298 <SERVO_MOTOR_Vertical>
 166:	2f ef       	ldi	r18, 0xFF	; 255
 168:	89 e6       	ldi	r24, 0x69	; 105
 16a:	98 e1       	ldi	r25, 0x18	; 24
 16c:	21 50       	subi	r18, 0x01	; 1
 16e:	80 40       	sbci	r24, 0x00	; 0
 170:	90 40       	sbci	r25, 0x00	; 0
 172:	e1 f7       	brne	.-8      	; 0x16c <UnParking+0x8c>
 174:	00 c0       	rjmp	.+0      	; 0x176 <UnParking+0x96>
 176:	00 00       	nop
	_delay_ms(1000);
	
	
	SERVO_MOTOR_TurnLeft();
 178:	0e 94 54 01 	call	0x2a8	; 0x2a8 <SERVO_MOTOR_TurnLeft>
	DC_MOTOR_RunClkWise();
 17c:	0e 94 09 01 	call	0x212	; 0x212 <DC_MOTOR_RunClkWise>
 180:	2f ef       	ldi	r18, 0xFF	; 255
 182:	8b e7       	ldi	r24, 0x7B	; 123
 184:	92 e9       	ldi	r25, 0x92	; 146
 186:	21 50       	subi	r18, 0x01	; 1
 188:	80 40       	sbci	r24, 0x00	; 0
 18a:	90 40       	sbci	r25, 0x00	; 0
 18c:	e1 f7       	brne	.-8      	; 0x186 <UnParking+0xa6>
 18e:	00 c0       	rjmp	.+0      	; 0x190 <UnParking+0xb0>
 190:	00 00       	nop
	_delay_ms(6000);
	
	SERVO_MOTOR_Vertical();
 192:	0e 94 4c 01 	call	0x298	; 0x298 <SERVO_MOTOR_Vertical>
	DC_MOTOR_Stop();
 196:	0e 94 1f 01 	call	0x23e	; 0x23e <DC_MOTOR_Stop>
 19a:	2f ef       	ldi	r18, 0xFF	; 255
 19c:	89 e6       	ldi	r24, 0x69	; 105
 19e:	98 e1       	ldi	r25, 0x18	; 24
 1a0:	21 50       	subi	r18, 0x01	; 1
 1a2:	80 40       	sbci	r24, 0x00	; 0
 1a4:	90 40       	sbci	r25, 0x00	; 0
 1a6:	e1 f7       	brne	.-8      	; 0x1a0 <UnParking+0xc0>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <UnParking+0xca>
 1aa:	00 00       	nop
	_delay_ms(1000);
	
	SERVO_MOTOR_TurnRight();
 1ac:	0e 94 50 01 	call	0x2a0	; 0x2a0 <SERVO_MOTOR_TurnRight>
	DC_MOTOR_RunClkWise();
 1b0:	0e 94 09 01 	call	0x212	; 0x212 <DC_MOTOR_RunClkWise>
 1b4:	2f ef       	ldi	r18, 0xFF	; 255
 1b6:	89 eb       	ldi	r24, 0xB9	; 185
 1b8:	9b ed       	ldi	r25, 0xDB	; 219
 1ba:	21 50       	subi	r18, 0x01	; 1
 1bc:	80 40       	sbci	r24, 0x00	; 0
 1be:	90 40       	sbci	r25, 0x00	; 0
 1c0:	e1 f7       	brne	.-8      	; 0x1ba <UnParking+0xda>
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <UnParking+0xe4>
 1c4:	00 00       	nop
	_delay_ms(9000);
	
	SERVO_MOTOR_Vertical();
 1c6:	0e 94 4c 01 	call	0x298	; 0x298 <SERVO_MOTOR_Vertical>
	DC_MOTOR_Stop();
 1ca:	0e 94 1f 01 	call	0x23e	; 0x23e <DC_MOTOR_Stop>
 1ce:	2f ef       	ldi	r18, 0xFF	; 255
 1d0:	89 e6       	ldi	r24, 0x69	; 105
 1d2:	98 e1       	ldi	r25, 0x18	; 24
 1d4:	21 50       	subi	r18, 0x01	; 1
 1d6:	80 40       	sbci	r24, 0x00	; 0
 1d8:	90 40       	sbci	r25, 0x00	; 0
 1da:	e1 f7       	brne	.-8      	; 0x1d4 <UnParking+0xf4>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <UnParking+0xfe>
 1de:	00 00       	nop
	_delay_ms(1000);
	
	DC_MOTOR_RunClkWise();
 1e0:	0e 94 09 01 	call	0x212	; 0x212 <DC_MOTOR_RunClkWise>
 1e4:	2f ef       	ldi	r18, 0xFF	; 255
 1e6:	84 e3       	ldi	r24, 0x34	; 52
 1e8:	9c e0       	ldi	r25, 0x0C	; 12
 1ea:	21 50       	subi	r18, 0x01	; 1
 1ec:	80 40       	sbci	r24, 0x00	; 0
 1ee:	90 40       	sbci	r25, 0x00	; 0
 1f0:	e1 f7       	brne	.-8      	; 0x1ea <UnParking+0x10a>
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <UnParking+0x114>
 1f4:	00 00       	nop
	_delay_ms(500);
	
	DC_MOTOR_Stop();
 1f6:	0e 94 1f 01 	call	0x23e	; 0x23e <DC_MOTOR_Stop>
 1fa:	08 95       	ret

000001fc <DC_MOTOR_Initilization>:
#include "DIO_Interface.h"


void DC_MOTOR_Initilization()
{
	DIO_SetPinDirection( DC_MOTOR_PORT, DC_MOTOR_PIN1, DIO_OUTPUT);
 1fc:	41 e0       	ldi	r20, 0x01	; 1
 1fe:	63 e0       	ldi	r22, 0x03	; 3
 200:	80 e0       	ldi	r24, 0x00	; 0
 202:	0e 94 97 01 	call	0x32e	; 0x32e <DIO_SetPinDirection>
	DIO_SetPinDirection( DC_MOTOR_PORT, DC_MOTOR_PIN2, DIO_OUTPUT);
 206:	41 e0       	ldi	r20, 0x01	; 1
 208:	64 e0       	ldi	r22, 0x04	; 4
 20a:	80 e0       	ldi	r24, 0x00	; 0
 20c:	0e 94 97 01 	call	0x32e	; 0x32e <DIO_SetPinDirection>
 210:	08 95       	ret

00000212 <DC_MOTOR_RunClkWise>:
}

void DC_MOTOR_RunClkWise()
{
	DIO_SetPinValue( DC_MOTOR_PORT, DC_MOTOR_PIN1, DIO_LOW);
 212:	40 e0       	ldi	r20, 0x00	; 0
 214:	63 e0       	ldi	r22, 0x03	; 3
 216:	80 e0       	ldi	r24, 0x00	; 0
 218:	0e 94 04 02 	call	0x408	; 0x408 <DIO_SetPinValue>
	DIO_SetPinValue( DC_MOTOR_PORT, DC_MOTOR_PIN2, DIO_HIGH);
 21c:	41 e0       	ldi	r20, 0x01	; 1
 21e:	64 e0       	ldi	r22, 0x04	; 4
 220:	80 e0       	ldi	r24, 0x00	; 0
 222:	0e 94 04 02 	call	0x408	; 0x408 <DIO_SetPinValue>
 226:	08 95       	ret

00000228 <DC_MOTOR_RunAntiClkWise>:
}

void DC_MOTOR_RunAntiClkWise()
{
	DIO_SetPinValue( DC_MOTOR_PORT, DC_MOTOR_PIN1, DIO_HIGH);
 228:	41 e0       	ldi	r20, 0x01	; 1
 22a:	63 e0       	ldi	r22, 0x03	; 3
 22c:	80 e0       	ldi	r24, 0x00	; 0
 22e:	0e 94 04 02 	call	0x408	; 0x408 <DIO_SetPinValue>
	DIO_SetPinValue( DC_MOTOR_PORT, DC_MOTOR_PIN2, DIO_LOW);
 232:	40 e0       	ldi	r20, 0x00	; 0
 234:	64 e0       	ldi	r22, 0x04	; 4
 236:	80 e0       	ldi	r24, 0x00	; 0
 238:	0e 94 04 02 	call	0x408	; 0x408 <DIO_SetPinValue>
 23c:	08 95       	ret

0000023e <DC_MOTOR_Stop>:
}

void DC_MOTOR_Stop()
{
	DIO_SetPinValue( DC_MOTOR_PORT, DC_MOTOR_PIN1, DIO_LOW);
 23e:	40 e0       	ldi	r20, 0x00	; 0
 240:	63 e0       	ldi	r22, 0x03	; 3
 242:	80 e0       	ldi	r24, 0x00	; 0
 244:	0e 94 04 02 	call	0x408	; 0x408 <DIO_SetPinValue>
	DIO_SetPinValue( DC_MOTOR_PORT, DC_MOTOR_PIN2, DIO_LOW);
 248:	40 e0       	ldi	r20, 0x00	; 0
 24a:	64 e0       	ldi	r22, 0x04	; 4
 24c:	80 e0       	ldi	r24, 0x00	; 0
 24e:	0e 94 04 02 	call	0x408	; 0x408 <DIO_SetPinValue>
 252:	08 95       	ret

00000254 <SERVO_MOTOR_SetAngle>:
}

static void SERVO_MOTOR_SetAngle(s8 angle)
{
	u16 value = 0;
	if (angle>=0 && angle<=90)
 254:	8b 35       	cpi	r24, 0x5B	; 91
 256:	48 f4       	brcc	.+18     	; 0x26a <SERVO_MOTOR_SetAngle+0x16>
	{
		value = 1350 + (11*angle);
 258:	2b e0       	ldi	r18, 0x0B	; 11
 25a:	82 02       	muls	r24, r18
 25c:	c0 01       	movw	r24, r0
 25e:	11 24       	eor	r1, r1
		Timer1_Update_OCR1A(value);
 260:	8a 5b       	subi	r24, 0xBA	; 186
 262:	9a 4f       	sbci	r25, 0xFA	; 250
 264:	0e 94 13 04 	call	0x826	; 0x826 <Timer1_Update_OCR1A>
 268:	08 95       	ret
	}
	else if (angle<0)
 26a:	88 23       	and	r24, r24
 26c:	4c f4       	brge	.+18     	; 0x280 <SERVO_MOTOR_SetAngle+0x2c>
	{
		angle *= -1;
 26e:	81 95       	neg	r24
		value = 1350 - (10*angle); 
 270:	26 ef       	ldi	r18, 0xF6	; 246
 272:	82 02       	muls	r24, r18
 274:	c0 01       	movw	r24, r0
 276:	11 24       	eor	r1, r1
		Timer1_Update_OCR1A(value);
 278:	8a 5b       	subi	r24, 0xBA	; 186
 27a:	9a 4f       	sbci	r25, 0xFA	; 250
 27c:	0e 94 13 04 	call	0x826	; 0x826 <Timer1_Update_OCR1A>
 280:	08 95       	ret

00000282 <SERVO_MOTOR_Initilization>:
#include "SERVO_MOTOR_Interface.h"

static void SERVO_MOTOR_SetAngle(s8 angle);

void SERVO_MOTOR_Initilization(){
	Timer1_Initilization(TIMER1_PWM_ICR1,TIMER1_PRESCALER_8,CLEAR,DISCONNECTED);
 282:	20 e0       	ldi	r18, 0x00	; 0
 284:	42 e0       	ldi	r20, 0x02	; 2
 286:	62 e0       	ldi	r22, 0x02	; 2
 288:	8a e0       	ldi	r24, 0x0A	; 10
 28a:	0e 94 fe 03 	call	0x7fc	; 0x7fc <Timer1_Initilization>
	Timer1_Update_ICR1(19999);
 28e:	8f e1       	ldi	r24, 0x1F	; 31
 290:	9e e4       	ldi	r25, 0x4E	; 78
 292:	0e 94 16 04 	call	0x82c	; 0x82c <Timer1_Update_ICR1>
 296:	08 95       	ret

00000298 <SERVO_MOTOR_Vertical>:
		Timer1_Update_OCR1A(value);
	}
}

void SERVO_MOTOR_Vertical(){
	SERVO_MOTOR_SetAngle(SERVO_NO_ANGLE);
 298:	80 e0       	ldi	r24, 0x00	; 0
 29a:	0e 94 2a 01 	call	0x254	; 0x254 <SERVO_MOTOR_SetAngle>
 29e:	08 95       	ret

000002a0 <SERVO_MOTOR_TurnRight>:
}
void SERVO_MOTOR_TurnRight()
{
	SERVO_MOTOR_SetAngle(SERVO_RIGHT_ANGLE);
 2a0:	8a e1       	ldi	r24, 0x1A	; 26
 2a2:	0e 94 2a 01 	call	0x254	; 0x254 <SERVO_MOTOR_SetAngle>
 2a6:	08 95       	ret

000002a8 <SERVO_MOTOR_TurnLeft>:
}

void SERVO_MOTOR_TurnLeft()
{
	SERVO_MOTOR_SetAngle(SERVO_LEFT_ANGLE);
 2a8:	83 ee       	ldi	r24, 0xE3	; 227
 2aa:	0e 94 2a 01 	call	0x254	; 0x254 <SERVO_MOTOR_SetAngle>
 2ae:	08 95       	ret

000002b0 <__vector_11>:
}



ISR(TIMER0_OVF_vect)
{
 2b0:	1f 92       	push	r1
 2b2:	0f 92       	push	r0
 2b4:	0f b6       	in	r0, 0x3f	; 63
 2b6:	0f 92       	push	r0
 2b8:	11 24       	eor	r1, r1
 2ba:	2f 93       	push	r18
 2bc:	3f 93       	push	r19
 2be:	4f 93       	push	r20
 2c0:	5f 93       	push	r21
 2c2:	6f 93       	push	r22
 2c4:	7f 93       	push	r23
 2c6:	8f 93       	push	r24
 2c8:	9f 93       	push	r25
 2ca:	af 93       	push	r26
	Num_Of_OV++;
 2cc:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__data_end>
 2d0:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__data_end+0x1>
 2d4:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <__data_end+0x2>
 2d8:	50 91 63 00 	lds	r21, 0x0063	; 0x800063 <__data_end+0x3>
 2dc:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <__data_end+0x4>
 2e0:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <__data_end+0x5>
 2e4:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_end+0x6>
 2e8:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <__data_end+0x7>
 2ec:	a1 e0       	ldi	r26, 0x01	; 1
 2ee:	0e 94 1f 04 	call	0x83e	; 0x83e <__adddi3_s8>
 2f2:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <__data_end>
 2f6:	30 93 61 00 	sts	0x0061, r19	; 0x800061 <__data_end+0x1>
 2fa:	40 93 62 00 	sts	0x0062, r20	; 0x800062 <__data_end+0x2>
 2fe:	50 93 63 00 	sts	0x0063, r21	; 0x800063 <__data_end+0x3>
 302:	60 93 64 00 	sts	0x0064, r22	; 0x800064 <__data_end+0x4>
 306:	70 93 65 00 	sts	0x0065, r23	; 0x800065 <__data_end+0x5>
 30a:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__data_end+0x6>
 30e:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <__data_end+0x7>
}
 312:	af 91       	pop	r26
 314:	9f 91       	pop	r25
 316:	8f 91       	pop	r24
 318:	7f 91       	pop	r23
 31a:	6f 91       	pop	r22
 31c:	5f 91       	pop	r21
 31e:	4f 91       	pop	r20
 320:	3f 91       	pop	r19
 322:	2f 91       	pop	r18
 324:	0f 90       	pop	r0
 326:	0f be       	out	0x3f, r0	; 63
 328:	0f 90       	pop	r0
 32a:	1f 90       	pop	r1
 32c:	18 95       	reti

0000032e <DIO_SetPinDirection>:

#include "DIO_Interface.h"

void DIO_SetPinDirection (u8 DIO_PORT_X, u8 DIO_PIN_X, u8 DIO_Direction)
{
  switch (DIO_PORT_X) 
 32e:	81 30       	cpi	r24, 0x01	; 1
 330:	01 f1       	breq	.+64     	; 0x372 <DIO_SetPinDirection+0x44>
 332:	30 f0       	brcs	.+12     	; 0x340 <DIO_SetPinDirection+0x12>
 334:	82 30       	cpi	r24, 0x02	; 2
 336:	b1 f1       	breq	.+108    	; 0x3a4 <DIO_SetPinDirection+0x76>
 338:	83 30       	cpi	r24, 0x03	; 3
 33a:	09 f4       	brne	.+2      	; 0x33e <DIO_SetPinDirection+0x10>
 33c:	4c c0       	rjmp	.+152    	; 0x3d6 <DIO_SetPinDirection+0xa8>
 33e:	08 95       	ret
  {
    case DIO_PORT_A :
     if (DIO_Direction == DIO_OUTPUT)
 340:	41 30       	cpi	r20, 0x01	; 1
 342:	59 f4       	brne	.+22     	; 0x35a <DIO_SetPinDirection+0x2c>
     {
       SET_BIT (DDR_A, DIO_PIN_X);
 344:	2a b3       	in	r18, 0x1a	; 26
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	02 c0       	rjmp	.+4      	; 0x350 <DIO_SetPinDirection+0x22>
 34c:	88 0f       	add	r24, r24
 34e:	99 1f       	adc	r25, r25
 350:	6a 95       	dec	r22
 352:	e2 f7       	brpl	.-8      	; 0x34c <DIO_SetPinDirection+0x1e>
 354:	82 2b       	or	r24, r18
 356:	8a bb       	out	0x1a, r24	; 26
 358:	08 95       	ret
     }
     else
     {
       CLEAR_BIT (DDR_A, DIO_PIN_X);
 35a:	2a b3       	in	r18, 0x1a	; 26
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	02 c0       	rjmp	.+4      	; 0x366 <DIO_SetPinDirection+0x38>
 362:	88 0f       	add	r24, r24
 364:	99 1f       	adc	r25, r25
 366:	6a 95       	dec	r22
 368:	e2 f7       	brpl	.-8      	; 0x362 <DIO_SetPinDirection+0x34>
 36a:	80 95       	com	r24
 36c:	82 23       	and	r24, r18
 36e:	8a bb       	out	0x1a, r24	; 26
 370:	08 95       	ret
     }
    break;
    case DIO_PORT_B :
     if (DIO_Direction == DIO_OUTPUT)
 372:	41 30       	cpi	r20, 0x01	; 1
 374:	59 f4       	brne	.+22     	; 0x38c <DIO_SetPinDirection+0x5e>
     {
       SET_BIT (DDR_B, DIO_PIN_X);
 376:	27 b3       	in	r18, 0x17	; 23
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	02 c0       	rjmp	.+4      	; 0x382 <DIO_SetPinDirection+0x54>
 37e:	88 0f       	add	r24, r24
 380:	99 1f       	adc	r25, r25
 382:	6a 95       	dec	r22
 384:	e2 f7       	brpl	.-8      	; 0x37e <DIO_SetPinDirection+0x50>
 386:	82 2b       	or	r24, r18
 388:	87 bb       	out	0x17, r24	; 23
 38a:	08 95       	ret
     }
     else
     {
       CLEAR_BIT (DDR_B, DIO_PIN_X);
 38c:	27 b3       	in	r18, 0x17	; 23
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	02 c0       	rjmp	.+4      	; 0x398 <DIO_SetPinDirection+0x6a>
 394:	88 0f       	add	r24, r24
 396:	99 1f       	adc	r25, r25
 398:	6a 95       	dec	r22
 39a:	e2 f7       	brpl	.-8      	; 0x394 <DIO_SetPinDirection+0x66>
 39c:	80 95       	com	r24
 39e:	82 23       	and	r24, r18
 3a0:	87 bb       	out	0x17, r24	; 23
 3a2:	08 95       	ret
     }
    break;
    case DIO_PORT_C :
     if (DIO_Direction == DIO_OUTPUT)
 3a4:	41 30       	cpi	r20, 0x01	; 1
 3a6:	59 f4       	brne	.+22     	; 0x3be <DIO_SetPinDirection+0x90>
     {
       SET_BIT (DDR_C, DIO_PIN_X);
 3a8:	24 b3       	in	r18, 0x14	; 20
 3aa:	81 e0       	ldi	r24, 0x01	; 1
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	02 c0       	rjmp	.+4      	; 0x3b4 <DIO_SetPinDirection+0x86>
 3b0:	88 0f       	add	r24, r24
 3b2:	99 1f       	adc	r25, r25
 3b4:	6a 95       	dec	r22
 3b6:	e2 f7       	brpl	.-8      	; 0x3b0 <DIO_SetPinDirection+0x82>
 3b8:	82 2b       	or	r24, r18
 3ba:	84 bb       	out	0x14, r24	; 20
 3bc:	08 95       	ret
     }
     else
     {
       CLEAR_BIT (DDR_C, DIO_PIN_X);
 3be:	24 b3       	in	r18, 0x14	; 20
 3c0:	81 e0       	ldi	r24, 0x01	; 1
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	02 c0       	rjmp	.+4      	; 0x3ca <DIO_SetPinDirection+0x9c>
 3c6:	88 0f       	add	r24, r24
 3c8:	99 1f       	adc	r25, r25
 3ca:	6a 95       	dec	r22
 3cc:	e2 f7       	brpl	.-8      	; 0x3c6 <DIO_SetPinDirection+0x98>
 3ce:	80 95       	com	r24
 3d0:	82 23       	and	r24, r18
 3d2:	84 bb       	out	0x14, r24	; 20
 3d4:	08 95       	ret
     }
    break;
    case DIO_PORT_D :
     if (DIO_Direction == DIO_OUTPUT)
 3d6:	41 30       	cpi	r20, 0x01	; 1
 3d8:	59 f4       	brne	.+22     	; 0x3f0 <DIO_SetPinDirection+0xc2>
     {
       SET_BIT (DDR_D, DIO_PIN_X);
 3da:	21 b3       	in	r18, 0x11	; 17
 3dc:	81 e0       	ldi	r24, 0x01	; 1
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	02 c0       	rjmp	.+4      	; 0x3e6 <DIO_SetPinDirection+0xb8>
 3e2:	88 0f       	add	r24, r24
 3e4:	99 1f       	adc	r25, r25
 3e6:	6a 95       	dec	r22
 3e8:	e2 f7       	brpl	.-8      	; 0x3e2 <DIO_SetPinDirection+0xb4>
 3ea:	82 2b       	or	r24, r18
 3ec:	81 bb       	out	0x11, r24	; 17
 3ee:	08 95       	ret
     }
     else
     {
       CLEAR_BIT (DDR_D, DIO_PIN_X);
 3f0:	21 b3       	in	r18, 0x11	; 17
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	02 c0       	rjmp	.+4      	; 0x3fc <DIO_SetPinDirection+0xce>
 3f8:	88 0f       	add	r24, r24
 3fa:	99 1f       	adc	r25, r25
 3fc:	6a 95       	dec	r22
 3fe:	e2 f7       	brpl	.-8      	; 0x3f8 <DIO_SetPinDirection+0xca>
 400:	80 95       	com	r24
 402:	82 23       	and	r24, r18
 404:	81 bb       	out	0x11, r24	; 17
 406:	08 95       	ret

00000408 <DIO_SetPinValue>:
}


void DIO_SetPinValue (u8 DIO_PORT_X, u8 DIO_PIN_X, u8 DIO_Value)
{
  switch (DIO_PORT_X) 
 408:	81 30       	cpi	r24, 0x01	; 1
 40a:	01 f1       	breq	.+64     	; 0x44c <DIO_SetPinValue+0x44>
 40c:	30 f0       	brcs	.+12     	; 0x41a <DIO_SetPinValue+0x12>
 40e:	82 30       	cpi	r24, 0x02	; 2
 410:	b1 f1       	breq	.+108    	; 0x47e <DIO_SetPinValue+0x76>
 412:	83 30       	cpi	r24, 0x03	; 3
 414:	09 f4       	brne	.+2      	; 0x418 <DIO_SetPinValue+0x10>
 416:	4c c0       	rjmp	.+152    	; 0x4b0 <DIO_SetPinValue+0xa8>
 418:	08 95       	ret
  {
    case DIO_PORT_A :
     if (DIO_Value == DIO_HIGH)
 41a:	41 30       	cpi	r20, 0x01	; 1
 41c:	59 f4       	brne	.+22     	; 0x434 <DIO_SetPinValue+0x2c>
     {
       SET_BIT (PORT_A, DIO_PIN_X);
 41e:	2b b3       	in	r18, 0x1b	; 27
 420:	81 e0       	ldi	r24, 0x01	; 1
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	02 c0       	rjmp	.+4      	; 0x42a <DIO_SetPinValue+0x22>
 426:	88 0f       	add	r24, r24
 428:	99 1f       	adc	r25, r25
 42a:	6a 95       	dec	r22
 42c:	e2 f7       	brpl	.-8      	; 0x426 <DIO_SetPinValue+0x1e>
 42e:	82 2b       	or	r24, r18
 430:	8b bb       	out	0x1b, r24	; 27
 432:	08 95       	ret
     }
     else
     {
       CLEAR_BIT (PORT_A, DIO_PIN_X);
 434:	2b b3       	in	r18, 0x1b	; 27
 436:	81 e0       	ldi	r24, 0x01	; 1
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	02 c0       	rjmp	.+4      	; 0x440 <DIO_SetPinValue+0x38>
 43c:	88 0f       	add	r24, r24
 43e:	99 1f       	adc	r25, r25
 440:	6a 95       	dec	r22
 442:	e2 f7       	brpl	.-8      	; 0x43c <DIO_SetPinValue+0x34>
 444:	80 95       	com	r24
 446:	82 23       	and	r24, r18
 448:	8b bb       	out	0x1b, r24	; 27
 44a:	08 95       	ret
     }
    break;
    case DIO_PORT_B :
     if (DIO_Value == DIO_HIGH)
 44c:	41 30       	cpi	r20, 0x01	; 1
 44e:	59 f4       	brne	.+22     	; 0x466 <DIO_SetPinValue+0x5e>
     {
       SET_BIT (PORT_B, DIO_PIN_X);
 450:	28 b3       	in	r18, 0x18	; 24
 452:	81 e0       	ldi	r24, 0x01	; 1
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	02 c0       	rjmp	.+4      	; 0x45c <DIO_SetPinValue+0x54>
 458:	88 0f       	add	r24, r24
 45a:	99 1f       	adc	r25, r25
 45c:	6a 95       	dec	r22
 45e:	e2 f7       	brpl	.-8      	; 0x458 <DIO_SetPinValue+0x50>
 460:	82 2b       	or	r24, r18
 462:	88 bb       	out	0x18, r24	; 24
 464:	08 95       	ret
     }
     else
     {
       CLEAR_BIT (PORT_B, DIO_PIN_X);
 466:	28 b3       	in	r18, 0x18	; 24
 468:	81 e0       	ldi	r24, 0x01	; 1
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	02 c0       	rjmp	.+4      	; 0x472 <DIO_SetPinValue+0x6a>
 46e:	88 0f       	add	r24, r24
 470:	99 1f       	adc	r25, r25
 472:	6a 95       	dec	r22
 474:	e2 f7       	brpl	.-8      	; 0x46e <DIO_SetPinValue+0x66>
 476:	80 95       	com	r24
 478:	82 23       	and	r24, r18
 47a:	88 bb       	out	0x18, r24	; 24
 47c:	08 95       	ret
     }
    break;
    case DIO_PORT_C :
     if (DIO_Value == DIO_HIGH)
 47e:	41 30       	cpi	r20, 0x01	; 1
 480:	59 f4       	brne	.+22     	; 0x498 <DIO_SetPinValue+0x90>
     {
       SET_BIT (PORT_C, DIO_PIN_X);
 482:	25 b3       	in	r18, 0x15	; 21
 484:	81 e0       	ldi	r24, 0x01	; 1
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	02 c0       	rjmp	.+4      	; 0x48e <DIO_SetPinValue+0x86>
 48a:	88 0f       	add	r24, r24
 48c:	99 1f       	adc	r25, r25
 48e:	6a 95       	dec	r22
 490:	e2 f7       	brpl	.-8      	; 0x48a <DIO_SetPinValue+0x82>
 492:	82 2b       	or	r24, r18
 494:	85 bb       	out	0x15, r24	; 21
 496:	08 95       	ret
     }
     else
     {
       CLEAR_BIT (PORT_C, DIO_PIN_X);
 498:	25 b3       	in	r18, 0x15	; 21
 49a:	81 e0       	ldi	r24, 0x01	; 1
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	02 c0       	rjmp	.+4      	; 0x4a4 <DIO_SetPinValue+0x9c>
 4a0:	88 0f       	add	r24, r24
 4a2:	99 1f       	adc	r25, r25
 4a4:	6a 95       	dec	r22
 4a6:	e2 f7       	brpl	.-8      	; 0x4a0 <DIO_SetPinValue+0x98>
 4a8:	80 95       	com	r24
 4aa:	82 23       	and	r24, r18
 4ac:	85 bb       	out	0x15, r24	; 21
 4ae:	08 95       	ret
     }
    break;
    case DIO_PORT_D :
     if (DIO_Value == DIO_HIGH)
 4b0:	41 30       	cpi	r20, 0x01	; 1
 4b2:	59 f4       	brne	.+22     	; 0x4ca <DIO_SetPinValue+0xc2>
     {
       SET_BIT (PORT_D, DIO_PIN_X);
 4b4:	22 b3       	in	r18, 0x12	; 18
 4b6:	81 e0       	ldi	r24, 0x01	; 1
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	02 c0       	rjmp	.+4      	; 0x4c0 <DIO_SetPinValue+0xb8>
 4bc:	88 0f       	add	r24, r24
 4be:	99 1f       	adc	r25, r25
 4c0:	6a 95       	dec	r22
 4c2:	e2 f7       	brpl	.-8      	; 0x4bc <DIO_SetPinValue+0xb4>
 4c4:	82 2b       	or	r24, r18
 4c6:	82 bb       	out	0x12, r24	; 18
 4c8:	08 95       	ret
     }
     else
     {
       CLEAR_BIT (PORT_D, DIO_PIN_X);
 4ca:	22 b3       	in	r18, 0x12	; 18
 4cc:	81 e0       	ldi	r24, 0x01	; 1
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	02 c0       	rjmp	.+4      	; 0x4d6 <DIO_SetPinValue+0xce>
 4d2:	88 0f       	add	r24, r24
 4d4:	99 1f       	adc	r25, r25
 4d6:	6a 95       	dec	r22
 4d8:	e2 f7       	brpl	.-8      	; 0x4d2 <DIO_SetPinValue+0xca>
 4da:	80 95       	com	r24
 4dc:	82 23       	and	r24, r18
 4de:	82 bb       	out	0x12, r24	; 18
 4e0:	08 95       	ret

000004e2 <Timer1_Update_Timer_Mode>:
	{
		case RISING:
		SET_BIT  (TCCR1B,ICES1);
		break;
		case FALLING:
		CLEAR_BIT(TCCR1B,ICES1);
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	8f 30       	cpi	r24, 0x0F	; 15
 4e6:	91 05       	cpc	r25, r1
 4e8:	08 f0       	brcs	.+2      	; 0x4ec <Timer1_Update_Timer_Mode+0xa>
 4ea:	c7 c0       	rjmp	.+398    	; 0x67a <Timer1_Update_Timer_Mode+0x198>
 4ec:	fc 01       	movw	r30, r24
 4ee:	e6 5d       	subi	r30, 0xD6	; 214
 4f0:	ff 4f       	sbci	r31, 0xFF	; 255
 4f2:	0c 94 19 04 	jmp	0x832	; 0x832 <__tablejump2__>
 4f6:	8f b5       	in	r24, 0x2f	; 47
 4f8:	8e 7f       	andi	r24, 0xFE	; 254
 4fa:	8f bd       	out	0x2f, r24	; 47
 4fc:	8f b5       	in	r24, 0x2f	; 47
 4fe:	8d 7f       	andi	r24, 0xFD	; 253
 500:	8f bd       	out	0x2f, r24	; 47
 502:	8e b5       	in	r24, 0x2e	; 46
 504:	87 7f       	andi	r24, 0xF7	; 247
 506:	8e bd       	out	0x2e, r24	; 46
 508:	8e b5       	in	r24, 0x2e	; 46
 50a:	8f 7e       	andi	r24, 0xEF	; 239
 50c:	8e bd       	out	0x2e, r24	; 46
 50e:	08 95       	ret
 510:	8f b5       	in	r24, 0x2f	; 47
 512:	81 60       	ori	r24, 0x01	; 1
 514:	8f bd       	out	0x2f, r24	; 47
 516:	8f b5       	in	r24, 0x2f	; 47
 518:	8d 7f       	andi	r24, 0xFD	; 253
 51a:	8f bd       	out	0x2f, r24	; 47
 51c:	8e b5       	in	r24, 0x2e	; 46
 51e:	87 7f       	andi	r24, 0xF7	; 247
 520:	8e bd       	out	0x2e, r24	; 46
 522:	8e b5       	in	r24, 0x2e	; 46
 524:	8f 7e       	andi	r24, 0xEF	; 239
 526:	8e bd       	out	0x2e, r24	; 46
 528:	08 95       	ret
 52a:	8f b5       	in	r24, 0x2f	; 47
 52c:	8e 7f       	andi	r24, 0xFE	; 254
 52e:	8f bd       	out	0x2f, r24	; 47
 530:	8f b5       	in	r24, 0x2f	; 47
 532:	82 60       	ori	r24, 0x02	; 2
 534:	8f bd       	out	0x2f, r24	; 47
 536:	8e b5       	in	r24, 0x2e	; 46
 538:	87 7f       	andi	r24, 0xF7	; 247
 53a:	8e bd       	out	0x2e, r24	; 46
 53c:	8e b5       	in	r24, 0x2e	; 46
 53e:	8f 7e       	andi	r24, 0xEF	; 239
 540:	8e bd       	out	0x2e, r24	; 46
 542:	08 95       	ret
 544:	8f b5       	in	r24, 0x2f	; 47
 546:	81 60       	ori	r24, 0x01	; 1
 548:	8f bd       	out	0x2f, r24	; 47
 54a:	8f b5       	in	r24, 0x2f	; 47
 54c:	82 60       	ori	r24, 0x02	; 2
 54e:	8f bd       	out	0x2f, r24	; 47
 550:	8e b5       	in	r24, 0x2e	; 46
 552:	87 7f       	andi	r24, 0xF7	; 247
 554:	8e bd       	out	0x2e, r24	; 46
 556:	8e b5       	in	r24, 0x2e	; 46
 558:	8f 7e       	andi	r24, 0xEF	; 239
 55a:	8e bd       	out	0x2e, r24	; 46
 55c:	08 95       	ret
 55e:	8f b5       	in	r24, 0x2f	; 47
 560:	8e 7f       	andi	r24, 0xFE	; 254
 562:	8f bd       	out	0x2f, r24	; 47
 564:	8f b5       	in	r24, 0x2f	; 47
 566:	8d 7f       	andi	r24, 0xFD	; 253
 568:	8f bd       	out	0x2f, r24	; 47
 56a:	8e b5       	in	r24, 0x2e	; 46
 56c:	88 60       	ori	r24, 0x08	; 8
 56e:	8e bd       	out	0x2e, r24	; 46
 570:	8e b5       	in	r24, 0x2e	; 46
 572:	8f 7e       	andi	r24, 0xEF	; 239
 574:	8e bd       	out	0x2e, r24	; 46
 576:	08 95       	ret
 578:	8f b5       	in	r24, 0x2f	; 47
 57a:	81 60       	ori	r24, 0x01	; 1
 57c:	8f bd       	out	0x2f, r24	; 47
 57e:	8f b5       	in	r24, 0x2f	; 47
 580:	8d 7f       	andi	r24, 0xFD	; 253
 582:	8f bd       	out	0x2f, r24	; 47
 584:	8e b5       	in	r24, 0x2e	; 46
 586:	88 60       	ori	r24, 0x08	; 8
 588:	8e bd       	out	0x2e, r24	; 46
 58a:	8e b5       	in	r24, 0x2e	; 46
 58c:	8f 7e       	andi	r24, 0xEF	; 239
 58e:	8e bd       	out	0x2e, r24	; 46
 590:	08 95       	ret
 592:	8f b5       	in	r24, 0x2f	; 47
 594:	8e 7f       	andi	r24, 0xFE	; 254
 596:	8f bd       	out	0x2f, r24	; 47
 598:	8f b5       	in	r24, 0x2f	; 47
 59a:	82 60       	ori	r24, 0x02	; 2
 59c:	8f bd       	out	0x2f, r24	; 47
 59e:	8e b5       	in	r24, 0x2e	; 46
 5a0:	88 60       	ori	r24, 0x08	; 8
 5a2:	8e bd       	out	0x2e, r24	; 46
 5a4:	8e b5       	in	r24, 0x2e	; 46
 5a6:	8f 7e       	andi	r24, 0xEF	; 239
 5a8:	8e bd       	out	0x2e, r24	; 46
 5aa:	08 95       	ret
 5ac:	8f b5       	in	r24, 0x2f	; 47
 5ae:	81 60       	ori	r24, 0x01	; 1
 5b0:	8f bd       	out	0x2f, r24	; 47
 5b2:	8f b5       	in	r24, 0x2f	; 47
 5b4:	82 60       	ori	r24, 0x02	; 2
 5b6:	8f bd       	out	0x2f, r24	; 47
 5b8:	8e b5       	in	r24, 0x2e	; 46
 5ba:	88 60       	ori	r24, 0x08	; 8
 5bc:	8e bd       	out	0x2e, r24	; 46
 5be:	8e b5       	in	r24, 0x2e	; 46
 5c0:	8f 7e       	andi	r24, 0xEF	; 239
 5c2:	8e bd       	out	0x2e, r24	; 46
 5c4:	08 95       	ret
 5c6:	8f b5       	in	r24, 0x2f	; 47
 5c8:	8e 7f       	andi	r24, 0xFE	; 254
 5ca:	8f bd       	out	0x2f, r24	; 47
 5cc:	8f b5       	in	r24, 0x2f	; 47
 5ce:	8d 7f       	andi	r24, 0xFD	; 253
 5d0:	8f bd       	out	0x2f, r24	; 47
 5d2:	8e b5       	in	r24, 0x2e	; 46
 5d4:	87 7f       	andi	r24, 0xF7	; 247
 5d6:	8e bd       	out	0x2e, r24	; 46
 5d8:	8e b5       	in	r24, 0x2e	; 46
 5da:	80 61       	ori	r24, 0x10	; 16
 5dc:	8e bd       	out	0x2e, r24	; 46
 5de:	08 95       	ret
 5e0:	8f b5       	in	r24, 0x2f	; 47
 5e2:	81 60       	ori	r24, 0x01	; 1
 5e4:	8f bd       	out	0x2f, r24	; 47
 5e6:	8f b5       	in	r24, 0x2f	; 47
 5e8:	8d 7f       	andi	r24, 0xFD	; 253
 5ea:	8f bd       	out	0x2f, r24	; 47
 5ec:	8e b5       	in	r24, 0x2e	; 46
 5ee:	87 7f       	andi	r24, 0xF7	; 247
 5f0:	8e bd       	out	0x2e, r24	; 46
 5f2:	8e b5       	in	r24, 0x2e	; 46
 5f4:	80 61       	ori	r24, 0x10	; 16
 5f6:	8e bd       	out	0x2e, r24	; 46
 5f8:	08 95       	ret
 5fa:	8f b5       	in	r24, 0x2f	; 47
 5fc:	8e 7f       	andi	r24, 0xFE	; 254
 5fe:	8f bd       	out	0x2f, r24	; 47
 600:	8f b5       	in	r24, 0x2f	; 47
 602:	82 60       	ori	r24, 0x02	; 2
 604:	8f bd       	out	0x2f, r24	; 47
 606:	8e b5       	in	r24, 0x2e	; 46
 608:	87 7f       	andi	r24, 0xF7	; 247
 60a:	8e bd       	out	0x2e, r24	; 46
 60c:	8e b5       	in	r24, 0x2e	; 46
 60e:	80 61       	ori	r24, 0x10	; 16
 610:	8e bd       	out	0x2e, r24	; 46
 612:	08 95       	ret
 614:	8f b5       	in	r24, 0x2f	; 47
 616:	81 60       	ori	r24, 0x01	; 1
 618:	8f bd       	out	0x2f, r24	; 47
 61a:	8f b5       	in	r24, 0x2f	; 47
 61c:	82 60       	ori	r24, 0x02	; 2
 61e:	8f bd       	out	0x2f, r24	; 47
 620:	8e b5       	in	r24, 0x2e	; 46
 622:	87 7f       	andi	r24, 0xF7	; 247
 624:	8e bd       	out	0x2e, r24	; 46
 626:	8e b5       	in	r24, 0x2e	; 46
 628:	80 61       	ori	r24, 0x10	; 16
 62a:	8e bd       	out	0x2e, r24	; 46
 62c:	08 95       	ret
 62e:	8f b5       	in	r24, 0x2f	; 47
 630:	8e 7f       	andi	r24, 0xFE	; 254
 632:	8f bd       	out	0x2f, r24	; 47
 634:	8f b5       	in	r24, 0x2f	; 47
 636:	8d 7f       	andi	r24, 0xFD	; 253
 638:	8f bd       	out	0x2f, r24	; 47
 63a:	8e b5       	in	r24, 0x2e	; 46
 63c:	88 60       	ori	r24, 0x08	; 8
 63e:	8e bd       	out	0x2e, r24	; 46
 640:	8e b5       	in	r24, 0x2e	; 46
 642:	80 61       	ori	r24, 0x10	; 16
 644:	8e bd       	out	0x2e, r24	; 46
 646:	08 95       	ret
 648:	8f b5       	in	r24, 0x2f	; 47
 64a:	8e 7f       	andi	r24, 0xFE	; 254
 64c:	8f bd       	out	0x2f, r24	; 47
 64e:	8f b5       	in	r24, 0x2f	; 47
 650:	82 60       	ori	r24, 0x02	; 2
 652:	8f bd       	out	0x2f, r24	; 47
 654:	8e b5       	in	r24, 0x2e	; 46
 656:	88 60       	ori	r24, 0x08	; 8
 658:	8e bd       	out	0x2e, r24	; 46
 65a:	8e b5       	in	r24, 0x2e	; 46
 65c:	80 61       	ori	r24, 0x10	; 16
 65e:	8e bd       	out	0x2e, r24	; 46
 660:	08 95       	ret
 662:	8f b5       	in	r24, 0x2f	; 47
 664:	81 60       	ori	r24, 0x01	; 1
 666:	8f bd       	out	0x2f, r24	; 47
 668:	8f b5       	in	r24, 0x2f	; 47
 66a:	82 60       	ori	r24, 0x02	; 2
 66c:	8f bd       	out	0x2f, r24	; 47
 66e:	8e b5       	in	r24, 0x2e	; 46
 670:	88 60       	ori	r24, 0x08	; 8
 672:	8e bd       	out	0x2e, r24	; 46
 674:	8e b5       	in	r24, 0x2e	; 46
 676:	80 61       	ori	r24, 0x10	; 16
 678:	8e bd       	out	0x2e, r24	; 46
 67a:	08 95       	ret

0000067c <Timer1_Update_Prescaler_Type>:
 67c:	90 e0       	ldi	r25, 0x00	; 0
 67e:	88 30       	cpi	r24, 0x08	; 8
 680:	91 05       	cpc	r25, r1
 682:	08 f0       	brcs	.+2      	; 0x686 <Timer1_Update_Prescaler_Type+0xa>
 684:	54 c0       	rjmp	.+168    	; 0x72e <Timer1_Update_Prescaler_Type+0xb2>
 686:	fc 01       	movw	r30, r24
 688:	e7 5c       	subi	r30, 0xC7	; 199
 68a:	ff 4f       	sbci	r31, 0xFF	; 255
 68c:	0c 94 19 04 	jmp	0x832	; 0x832 <__tablejump2__>
 690:	8e b5       	in	r24, 0x2e	; 46
 692:	8e 7f       	andi	r24, 0xFE	; 254
 694:	8e bd       	out	0x2e, r24	; 46
 696:	8e b5       	in	r24, 0x2e	; 46
 698:	8d 7f       	andi	r24, 0xFD	; 253
 69a:	8e bd       	out	0x2e, r24	; 46
 69c:	8e b5       	in	r24, 0x2e	; 46
 69e:	8b 7f       	andi	r24, 0xFB	; 251
 6a0:	8e bd       	out	0x2e, r24	; 46
 6a2:	08 95       	ret
 6a4:	8e b5       	in	r24, 0x2e	; 46
 6a6:	81 60       	ori	r24, 0x01	; 1
 6a8:	8e bd       	out	0x2e, r24	; 46
 6aa:	8e b5       	in	r24, 0x2e	; 46
 6ac:	8d 7f       	andi	r24, 0xFD	; 253
 6ae:	8e bd       	out	0x2e, r24	; 46
 6b0:	8e b5       	in	r24, 0x2e	; 46
 6b2:	8b 7f       	andi	r24, 0xFB	; 251
 6b4:	8e bd       	out	0x2e, r24	; 46
 6b6:	08 95       	ret
 6b8:	8e b5       	in	r24, 0x2e	; 46
 6ba:	8e 7f       	andi	r24, 0xFE	; 254
 6bc:	8e bd       	out	0x2e, r24	; 46
 6be:	8e b5       	in	r24, 0x2e	; 46
 6c0:	82 60       	ori	r24, 0x02	; 2
 6c2:	8e bd       	out	0x2e, r24	; 46
 6c4:	8e b5       	in	r24, 0x2e	; 46
 6c6:	8b 7f       	andi	r24, 0xFB	; 251
 6c8:	8e bd       	out	0x2e, r24	; 46
 6ca:	08 95       	ret
 6cc:	8e b5       	in	r24, 0x2e	; 46
 6ce:	81 60       	ori	r24, 0x01	; 1
 6d0:	8e bd       	out	0x2e, r24	; 46
 6d2:	8e b5       	in	r24, 0x2e	; 46
 6d4:	82 60       	ori	r24, 0x02	; 2
 6d6:	8e bd       	out	0x2e, r24	; 46
 6d8:	8e b5       	in	r24, 0x2e	; 46
 6da:	8b 7f       	andi	r24, 0xFB	; 251
 6dc:	8e bd       	out	0x2e, r24	; 46
 6de:	08 95       	ret
 6e0:	8e b5       	in	r24, 0x2e	; 46
 6e2:	8e 7f       	andi	r24, 0xFE	; 254
 6e4:	8e bd       	out	0x2e, r24	; 46
 6e6:	8e b5       	in	r24, 0x2e	; 46
 6e8:	8d 7f       	andi	r24, 0xFD	; 253
 6ea:	8e bd       	out	0x2e, r24	; 46
 6ec:	8e b5       	in	r24, 0x2e	; 46
 6ee:	84 60       	ori	r24, 0x04	; 4
 6f0:	8e bd       	out	0x2e, r24	; 46
 6f2:	08 95       	ret
 6f4:	8e b5       	in	r24, 0x2e	; 46
 6f6:	81 60       	ori	r24, 0x01	; 1
 6f8:	8e bd       	out	0x2e, r24	; 46
 6fa:	8e b5       	in	r24, 0x2e	; 46
 6fc:	8d 7f       	andi	r24, 0xFD	; 253
 6fe:	8e bd       	out	0x2e, r24	; 46
 700:	8e b5       	in	r24, 0x2e	; 46
 702:	84 60       	ori	r24, 0x04	; 4
 704:	8e bd       	out	0x2e, r24	; 46
 706:	08 95       	ret
 708:	8e b5       	in	r24, 0x2e	; 46
 70a:	81 60       	ori	r24, 0x01	; 1
 70c:	8e bd       	out	0x2e, r24	; 46
 70e:	8e b5       	in	r24, 0x2e	; 46
 710:	82 60       	ori	r24, 0x02	; 2
 712:	8e bd       	out	0x2e, r24	; 46
 714:	8e b5       	in	r24, 0x2e	; 46
 716:	8b 7f       	andi	r24, 0xFB	; 251
 718:	8e bd       	out	0x2e, r24	; 46
 71a:	08 95       	ret
 71c:	8e b5       	in	r24, 0x2e	; 46
 71e:	81 60       	ori	r24, 0x01	; 1
 720:	8e bd       	out	0x2e, r24	; 46
 722:	8e b5       	in	r24, 0x2e	; 46
 724:	82 60       	ori	r24, 0x02	; 2
 726:	8e bd       	out	0x2e, r24	; 46
 728:	8e b5       	in	r24, 0x2e	; 46
 72a:	84 60       	ori	r24, 0x04	; 4
 72c:	8e bd       	out	0x2e, r24	; 46
 72e:	08 95       	ret

00000730 <Timer1_Update_OCA_Mode>:
 730:	81 30       	cpi	r24, 0x01	; 1
 732:	69 f0       	breq	.+26     	; 0x74e <Timer1_Update_OCA_Mode+0x1e>
 734:	28 f0       	brcs	.+10     	; 0x740 <Timer1_Update_OCA_Mode+0x10>
 736:	82 30       	cpi	r24, 0x02	; 2
 738:	b1 f0       	breq	.+44     	; 0x766 <Timer1_Update_OCA_Mode+0x36>
 73a:	83 30       	cpi	r24, 0x03	; 3
 73c:	01 f1       	breq	.+64     	; 0x77e <Timer1_Update_OCA_Mode+0x4e>
 73e:	08 95       	ret
 740:	8f b5       	in	r24, 0x2f	; 47
 742:	8f 7b       	andi	r24, 0xBF	; 191
 744:	8f bd       	out	0x2f, r24	; 47
 746:	8f b5       	in	r24, 0x2f	; 47
 748:	8f 77       	andi	r24, 0x7F	; 127
 74a:	8f bd       	out	0x2f, r24	; 47
 74c:	08 95       	ret
 74e:	41 e0       	ldi	r20, 0x01	; 1
 750:	65 e0       	ldi	r22, 0x05	; 5
 752:	83 e0       	ldi	r24, 0x03	; 3
 754:	0e 94 97 01 	call	0x32e	; 0x32e <DIO_SetPinDirection>
 758:	8f b5       	in	r24, 0x2f	; 47
 75a:	80 64       	ori	r24, 0x40	; 64
 75c:	8f bd       	out	0x2f, r24	; 47
 75e:	8f b5       	in	r24, 0x2f	; 47
 760:	8f 77       	andi	r24, 0x7F	; 127
 762:	8f bd       	out	0x2f, r24	; 47
 764:	08 95       	ret
 766:	41 e0       	ldi	r20, 0x01	; 1
 768:	65 e0       	ldi	r22, 0x05	; 5
 76a:	83 e0       	ldi	r24, 0x03	; 3
 76c:	0e 94 97 01 	call	0x32e	; 0x32e <DIO_SetPinDirection>
 770:	8f b5       	in	r24, 0x2f	; 47
 772:	8f 7b       	andi	r24, 0xBF	; 191
 774:	8f bd       	out	0x2f, r24	; 47
 776:	8f b5       	in	r24, 0x2f	; 47
 778:	80 68       	ori	r24, 0x80	; 128
 77a:	8f bd       	out	0x2f, r24	; 47
 77c:	08 95       	ret
 77e:	41 e0       	ldi	r20, 0x01	; 1
 780:	65 e0       	ldi	r22, 0x05	; 5
 782:	83 e0       	ldi	r24, 0x03	; 3
 784:	0e 94 97 01 	call	0x32e	; 0x32e <DIO_SetPinDirection>
 788:	8f b5       	in	r24, 0x2f	; 47
 78a:	80 64       	ori	r24, 0x40	; 64
 78c:	8f bd       	out	0x2f, r24	; 47
 78e:	8f b5       	in	r24, 0x2f	; 47
 790:	80 68       	ori	r24, 0x80	; 128
 792:	8f bd       	out	0x2f, r24	; 47
 794:	08 95       	ret

00000796 <Timer1_Update_OCB_Mode>:
 796:	81 30       	cpi	r24, 0x01	; 1
 798:	69 f0       	breq	.+26     	; 0x7b4 <Timer1_Update_OCB_Mode+0x1e>
 79a:	28 f0       	brcs	.+10     	; 0x7a6 <Timer1_Update_OCB_Mode+0x10>
 79c:	82 30       	cpi	r24, 0x02	; 2
 79e:	b1 f0       	breq	.+44     	; 0x7cc <Timer1_Update_OCB_Mode+0x36>
 7a0:	83 30       	cpi	r24, 0x03	; 3
 7a2:	01 f1       	breq	.+64     	; 0x7e4 <Timer1_Update_OCB_Mode+0x4e>
 7a4:	08 95       	ret
 7a6:	8f b5       	in	r24, 0x2f	; 47
 7a8:	8f 7e       	andi	r24, 0xEF	; 239
 7aa:	8f bd       	out	0x2f, r24	; 47
 7ac:	8f b5       	in	r24, 0x2f	; 47
 7ae:	8f 7d       	andi	r24, 0xDF	; 223
 7b0:	8f bd       	out	0x2f, r24	; 47
 7b2:	08 95       	ret
 7b4:	41 e0       	ldi	r20, 0x01	; 1
 7b6:	64 e0       	ldi	r22, 0x04	; 4
 7b8:	83 e0       	ldi	r24, 0x03	; 3
 7ba:	0e 94 97 01 	call	0x32e	; 0x32e <DIO_SetPinDirection>
 7be:	8f b5       	in	r24, 0x2f	; 47
 7c0:	80 61       	ori	r24, 0x10	; 16
 7c2:	8f bd       	out	0x2f, r24	; 47
 7c4:	8f b5       	in	r24, 0x2f	; 47
 7c6:	8f 7d       	andi	r24, 0xDF	; 223
 7c8:	8f bd       	out	0x2f, r24	; 47
 7ca:	08 95       	ret
 7cc:	41 e0       	ldi	r20, 0x01	; 1
 7ce:	64 e0       	ldi	r22, 0x04	; 4
 7d0:	83 e0       	ldi	r24, 0x03	; 3
 7d2:	0e 94 97 01 	call	0x32e	; 0x32e <DIO_SetPinDirection>
 7d6:	8f b5       	in	r24, 0x2f	; 47
 7d8:	8f 7e       	andi	r24, 0xEF	; 239
 7da:	8f bd       	out	0x2f, r24	; 47
 7dc:	8f b5       	in	r24, 0x2f	; 47
 7de:	80 62       	ori	r24, 0x20	; 32
 7e0:	8f bd       	out	0x2f, r24	; 47
 7e2:	08 95       	ret
 7e4:	41 e0       	ldi	r20, 0x01	; 1
 7e6:	64 e0       	ldi	r22, 0x04	; 4
 7e8:	83 e0       	ldi	r24, 0x03	; 3
 7ea:	0e 94 97 01 	call	0x32e	; 0x32e <DIO_SetPinDirection>
 7ee:	8f b5       	in	r24, 0x2f	; 47
 7f0:	80 61       	ori	r24, 0x10	; 16
 7f2:	8f bd       	out	0x2f, r24	; 47
 7f4:	8f b5       	in	r24, 0x2f	; 47
 7f6:	80 62       	ori	r24, 0x20	; 32
 7f8:	8f bd       	out	0x2f, r24	; 47
 7fa:	08 95       	ret

000007fc <Timer1_Initilization>:
 7fc:	1f 93       	push	r17
 7fe:	cf 93       	push	r28
 800:	df 93       	push	r29
 802:	c6 2f       	mov	r28, r22
 804:	14 2f       	mov	r17, r20
 806:	d2 2f       	mov	r29, r18
 808:	0e 94 71 02 	call	0x4e2	; 0x4e2 <Timer1_Update_Timer_Mode>
 80c:	81 2f       	mov	r24, r17
 80e:	0e 94 98 03 	call	0x730	; 0x730 <Timer1_Update_OCA_Mode>
 812:	8d 2f       	mov	r24, r29
 814:	0e 94 cb 03 	call	0x796	; 0x796 <Timer1_Update_OCB_Mode>
 818:	8c 2f       	mov	r24, r28
 81a:	0e 94 3e 03 	call	0x67c	; 0x67c <Timer1_Update_Prescaler_Type>
 81e:	df 91       	pop	r29
 820:	cf 91       	pop	r28
 822:	1f 91       	pop	r17
 824:	08 95       	ret

00000826 <Timer1_Update_OCR1A>:
 826:	9b bd       	out	0x2b, r25	; 43
 828:	8a bd       	out	0x2a, r24	; 42
 82a:	08 95       	ret

0000082c <Timer1_Update_ICR1>:
	}
}

void Timer1_Update_ICR1(u16 value)
{
	ICR1 = value;
 82c:	97 bd       	out	0x27, r25	; 39
 82e:	86 bd       	out	0x26, r24	; 38
 830:	08 95       	ret

00000832 <__tablejump2__>:
 832:	ee 0f       	add	r30, r30
 834:	ff 1f       	adc	r31, r31
 836:	05 90       	lpm	r0, Z+
 838:	f4 91       	lpm	r31, Z
 83a:	e0 2d       	mov	r30, r0
 83c:	09 94       	ijmp

0000083e <__adddi3_s8>:
 83e:	00 24       	eor	r0, r0
 840:	a7 fd       	sbrc	r26, 7
 842:	00 94       	com	r0
 844:	2a 0f       	add	r18, r26
 846:	30 1d       	adc	r19, r0
 848:	40 1d       	adc	r20, r0
 84a:	50 1d       	adc	r21, r0
 84c:	60 1d       	adc	r22, r0
 84e:	70 1d       	adc	r23, r0
 850:	80 1d       	adc	r24, r0
 852:	90 1d       	adc	r25, r0
 854:	08 95       	ret

00000856 <_exit>:
 856:	f8 94       	cli

00000858 <__stop_program>:
 858:	ff cf       	rjmp	.-2      	; 0x858 <__stop_program>
